import Head from "next/head";
import styles from "../../styles/Home.module.css";
import { useQuery, gql } from "@apollo/client";
import React, { useState } from "react";
import SearchBar from "../searchBar/searchBar";
import CharacterList from "../characterList/characterList";
import { Button } from "@material-ui/core";
import Spinner from '../spinner/spinner';
import Error from '../error/error';

interface characterData {
    id: string;
    name: string;
    image: string;
}

var isSearch:boolean = false;
var my_filter:string = "";

export default function Home() {
  const Characters_data = gql`
    query CharactersQuery($page: Int, $filter: FilterCharacter) {
      characters(page: $page, filter: $filter) {
        info {
          prev
          next
        }
        results {
          id
          name
          image
        }
      }
    }
  `;

  const { loading, error, data, fetchMore } = useQuery(Characters_data, {
    variables: { page: 1, filter: {} },
    errorPolicy: "ignore",
  });
  if (loading) return <Spinner />;
  if (error) return <Error />;

  function loadMore(isSearch:boolean, my_filter:string) {
    const nextPage = data.characters.info.next;
    var variables = { page: nextPage, filter: {} };
    if (isSearch) {
      variables = { page: nextPage, filter: { name: my_filter } };
    }

    fetchMore({
      variables: variables,

      updateQuery: (prevResult:{characters: {results: characterData[]}}, { fetchMoreResult }) => {
        fetchMoreResult.characters.results = [
          ...prevResult.characters.results,
          ...fetchMoreResult.characters.results,
        ];
        return fetchMoreResult;
      },
    }).catch(error => {
        console.log(error);
    });
  }

  function search(event: React.FormEvent<HTMLFormElement>): void {
    event.preventDefault();
    isSearch = true;
    my_filter = event.target[0].value;

    fetchMore({
      variables: { page: null, filter: { name: my_filter } },
      updateQuery: (prevResult, { fetchMoreResult }) => {
        return fetchMoreResult;
      },
    });
  }

  const results: characterData[] = data.characters ? data.characters.results : [];
  const info: {
    prev: number | string;
    next: number | string;
  } = data.characters ? data.characters.info : { prev: null, next: null };

  return (
    <>
      <Head>
        <title>Rick and Morty</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <br />
      <br />
      <br />
      <SearchBar search={(event: React.FormEvent<HTMLFormElement>) => search(event)} value={my_filter} />
      <CharacterList characters={results} />
      <div className={styles.loadMore}>
        {info.next ? (
          <Button
            variant="contained"
            color="primary"
            size="large"
            onClick={() => loadMore(isSearch, my_filter)}
          >
            Load More
          </Button>
        ) : null}
      </div>
    </>
  );
}
